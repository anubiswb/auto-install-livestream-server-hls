# #########################################################
# Hi, my name GUIDE.txt and I will give you a quick tour. #
# This is a long read, it contains the essentials for you # 
# #########################################################

Your live-stream server is built up from a couple of building blocks. Nginx is the core of it all. Nginx is a web server that we instrcuted to behave like a RTMP live-stream server by adding a module to it. Nginx can receive and send RTMP streams, and it can transform these input RTMP streams in to many different other streams. Nginx can translate RTMP to HLS on it's own, but for Adaptive bitrate streams it needs help from an app called FFmpeg. Your Nginx server is currently setup to grab the incoming RTMP stream, forward it to FFmpeg, and the output from FFmpeg is retreived by Nginx, and packaged together with a playlist file, making it true HLS stream. That means that your stream can be watched on any type of device, including viewers who are on a slower internet connection. 

Another building block of the server is FFmpeg. This is an app that can take any form of video and transcode it in any other form of video. It is primarely used from the commandline when manually used. Other apps, in our case Nginx, can send instructions to FFmpeg and it will in return provide to Nginx what is asked for. These instructions are transcoding commands defined in nginx.conf that will create fragment video files that together with a playlist file are used for playing the live-stream on the viewers end. When you see the CPU usage go up once you start live-streaming, FFmpeg will be the process responsible for this. There's no way around it, transcoding unfortunately takes a lot of processing power. Depening on the hardware of your server, this will be an easy task for your server, or a heavy task, or in the wost case a task that it can't properly handle. So make sure you monitor the CPU usage when you are streaming. If all the cores usage goes up to 80% or above, you may want to cosidder using better hardware.

A list of config files that power the server. 

Let's start with the most important one. The Nginx config file is what makes Nginx run, and it makes the live-stream server do what it does. Feel free to fiddle around with the options available to shape your server the way you want it to be.  

- /etc/nginx/nginx.conf # All the variables that are used for the live-stream server are defined in this file. The config currently in place is solid, and it works great, and has proven to work well for years already. But, that doesn't mean you shouldn't change any of the options it gives you. When I created this file a while ago, I added descriptions to many of the options. These can help you decide if you want to change any of the options. Example: You want the output stream to be DASH instead of HLS. Or perhaps both? You will find the settings for this in the nginx.conf file. Make sure you take at least one look at it, even if it's just that one time. It helps you to form a better image in your head on what your server is doing in the background when you are live-streaming. This will be very usefull in case you need to change things so it better fits your needs.

. /etc/nginx/sites-available/YOURDOMAIN.vhost # Contains the config that is behind the video player on your specified domain name. Contains virtual host essentials, and some things that are used for playing the live-stream from the video page or from elsewhere. 

- /var/www/web/index.html is the page that people get to see when they visit your page. This file doesn't contain a lot of content. It uses an iframe to embed the clappr.html file that is in the same folder. I've chosen to use an iframe to embed the videoplayer because this allows for a video player that is responsive. I'm guessing there's other, perhaps better ways to have clappr become a responsive player, but this method of using an iframe was the first one that actually worked for me.

- /var/www/web/clappr.html contains the code for the Clappr video player that plays your livestream. This video player understands many variables that you can use to add/change behaviour of the player. These options can be found in the official documentation of Clappr on http://clappr.github.io/classes/Player.html. Not happy with Clappr? No problem, You can use any other video player if you want. You have a lot of options. A list with a bunch of alternative video players can be found here: https://ottverse.com/best-html5-video-players-for-the-web-free-and-paid/. 

Under /mnt/livestream are a couple of new folders that the server uses to store temporary video fragment files that are sent to the people watching the stream. These folders are empty now, but once you start streaming you'll see the video fragment files appear in these folders. Once you stop streaming these folders are automatically cleaned. Normally you don't need to concern yourself of what exactly happens in these folders, so this is just to let you know that you shouldn't delete these folders, unless you know what you're doing. Please keep in mind that you'll need to change the 

Setting up your live-stream origin app

You're probably using an app like, or similar to Open Broadcasting Studio to create you live-streeam. To setup your OBS, or any other live-stream app, you'll need to add the address of your server to your settings. You'll have to enter an address: "rtmp://192.x.x.x/live" , where you need to replace the 192.x.x.x part with the actual IP address of your server. Under live-stream key enter: "stream". Then save and start streaming! In case you want to stream to your server from somewhere else ,via the internet, to a server that you have at your home, you'll need to open/forward port 1935 to the server in your router.

To see if the HLS output is working, we can take a look at the webpage that should show your stream. Use a webbrowser and enter the domain name you used to setup the server. Once you confirmed that it's working, head over to the /stat page to view some interesting data. In the address bar of your webbrowser, simply add the following to the current URL: /stat. In case you prefer to password protect this page, define it in the virtual host file inside /etc/nginx/sites-available.
The stat page shows you information of your live-streams. You may notice there that your single RTMP live-stream is being transformed in to different output streams. Those basically define the HLS stream. It's exactly how we want it, since that is what allows people on low-ed devices or on a slow internet connection to still view the stream. 

You can choose to provide viewers with the web address to your server, that shows the Clappr video player, where people can watch the stream, like we just did. But, I'm guessing that you'll want to have your live-stream to be seen on other web sites as well. You can! The only thing the other website needs from you in order to show your stream, is the address to a HLS playlist file. Your stream is producing such a playlist for you, and it can be found at: https://yourdomainname/hls/index.m3u8. This playlist file can be opened directly, from a video player web page for example. Or in VLC on a desktop PC, or a player app on your TV. Many apps that play m3u8 playlists are available in your phones app store/play store.

In case you want to test if you're stream can be watched when opened by others, you can feed the address to your playlist to any of the free to use websites listed on this page: https://ottverse.com/top-online-m3u8-players-to-test-hls-m3u8-streams/. I mostly use https://hlsjs.video-dev.org/demo/. This will not only show you if it all works, or not, it will also produce some details regarding the Adaptive bitrate stream, that can be interesting.

I think that this pretty much covered all the things you need to know. 